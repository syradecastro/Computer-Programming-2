import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.*;
import java.util.*;

public class MotorPH {
    private static final String CSV_FILE = "MotorPH_Employees.csv";

    public static void main(String[] args) {
        List<Employee> employees = readEmployeesFromExcel("C:\Program Files\Java");
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\n=== MotorPH Employee Menu ===");
            System.out.println("1. View all employees");
            System.out.println("2. View specific employee");
            System.out.println("3. View pay details for employee by month");
            System.out.println("4. Add new employee and save to CSV");
            System.out.println("5. Update employee details and save to CSV");
            System.out.println("6. Delete employee and update CSV");
            System.out.println("0. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1 -> {
                    for (Employee e : employees) {
                        System.out.println(e.getDetails());
                    }
                }
                case 2 -> {
                    System.out.print("Enter Employee ID: ");
                    int id = scanner.nextInt();
                    scanner.nextLine();
                    employees.stream().filter(e -> e.employeeId == id)
                            .findFirst()
                            .ifPresentOrElse(
                                    e -> System.out.println(e.getDetails()),
                                    () -> System.out.println("Employee not found."));
                }
                case 3 -> {
                    System.out.print("Enter Employee ID: ");
                    int id = scanner.nextInt();
                    scanner.nextLine();
                    System.out.print("Enter month: ");
                    String month = scanner.nextLine();
                    employees.stream().filter(e -> e.employeeId == id)
                            .findFirst()
                            .ifPresentOrElse(e -> {
                                System.out.println("Pay details for " + e.getDetails());
                                System.out.println("Month: " + month);
                                System.out.println("Total Salary: " + e.calculateSalary());
                            }, () -> System.out.println("Employee not found."));
                }
                case 4 -> {
                    Employee e = readEmployeeDetails(scanner, employees.size() + 1);
                    employees.add(e);
                    saveEmployeesToCSV(employees);
                    System.out.println("New employee added and saved to CSV.");
                }
                case 5 -> {
                    System.out.print("Enter Employee ID to update: ");
                    int id = scanner.nextInt();
                    scanner.nextLine();
                    Optional<Employee> empOpt = employees.stream().filter(emp -> emp.employeeId == id).findFirst();
                    if (empOpt.isPresent()) {
                        Employee updated = readEmployeeDetails(scanner, id);
                        int idx = employees.indexOf(empOpt.get());
                        employees.set(idx, updated);
                        saveEmployeesToCSV(employees);
                        System.out.println("Employee details updated.");
                    } else {
                        System.out.println("Employee not found.");
                    }
                }
                case 6 -> {
                    System.out.print("Enter Employee ID to delete: ");
                    int id = scanner.nextInt();
                    scanner.nextLine();
                    boolean removed = employees.removeIf(e -> e.employeeId == id);
                    if (removed) {
                        saveEmployeesToCSV(employees);
                        System.out.println("Employee deleted.");
                    } else {
                        System.out.println("Employee not found.");
                    }
                }
                case 0 -> {
                    System.out.println("Exiting...");
                    return;
                }
                default -> System.out.println("Invalid option.");
            }
        }
    }

    public static Employee readEmployeeDetails(Scanner scanner, int id) {
        Employee e = new Employee();
        e.employeeId = id;
        System.out.print("First Name: ");
        e.firstName = scanner.nextLine();
        System.out.print("Last Name: ");
        e.lastName = scanner.nextLine();
        System.out.print("Position: ");
        e.position = scanner.nextLine();
        System.out.print("Basic Salary: ");
        e.basicSalary = scanner.nextDouble();
        System.out.print("Hourly Rate: ");
        e.hourlyRate = scanner.nextDouble();
        scanner.nextLine();
        System.out.print("Department: ");
        e.department = scanner.nextLine();
        System.out.print("Phone: ");
        e.contactNumber = scanner.nextLine();
        System.out.print("Address: ");
        e.address = scanner.nextLine();
        System.out.print("SSS #: ");
        e.sssNumber = scanner.nextLine();
        System.out.print("PhilHealth #: ");
        e.philHealthNumber = scanner.nextLine();
        System.out.print("TIN #: ");
        e.tinNumber = scanner.nextLine();
        System.out.print("Pag-Ibig #: ");
        e.pagIbigNumber = scanner.nextLine();
        System.out.print("Meal Allowance: ");
        e.mealAllowance = scanner.nextDouble();
        scanner.nextLine();
        return e;
    }

    public static List<Employee> readEmployeesFromExcel(String C:\Program Files\Java) {
        List<Employee> employees = new ArrayList<>();
        try (FileInputStream fis = new FileInputStream(C:\Program Files\Java);
        try (FileInputStream fis = new FileInputStream();
             Workbook workbook = new XSSFWorkbook(fis)) {
            Sheet sheet = workbook.getSheetAt(0);
            for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                if (row == null) continue;
                Employee e = new Employee();
                e.employeeId = (int) row.getCell(0).getNumericCellValue();
                e.lastName = row.getCell(1).getStringCellValue();
                e.firstName = row.getCell(2).getStringCellValue();
                e.address = row.getCell(4).getStringCellValue();
                e.contactNumber = row.getCell(5).getStringCellValue();
                e.sssNumber = row.getCell(6).getStringCellValue();
                e.philHealthNumber = row.getCell(7).getStringCellValue();
                e.tinNumber = row.getCell(8).getStringCellValue();
                e.pagIbigNumber = row.getCell(9).getStringCellValue();
                e.position = row.getCell(11).getStringCellValue();
                e.basicSalary = row.getCell(13).getNumericCellValue();
                e.mealAllowance = row.getCell(14).getNumericCellValue();
                e.hourlyRate = row.getCell(16).getNumericCellValue();
                employees.add(e);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return employees;
    }

    // Overwrites CSV with all current employees
    public static void saveEmployeesToCSV(List<Employee> employees) {
        try (FileWriter writer = new FileWriter(CSV_FILE, false)) {
            for (Employee e : employees) {
                writer.append(String.format("%d,%s,%s,%s,%.2f,%.2f,%s,%s,%s,%s,%s,%s,%s,%.2f\n",
                        e.employeeId, e.firstName, e.lastName, e.position,
                        e.basicSalary, e.hourlyRate, e.department, e.contactNumber,
                        e.address, e.sssNumber, e.philHealthNumber, e.tinNumber,
                        e.pagIbigNumber, e.mealAllowance));
            }
        } catch (IOException ex) {
            System.out.println("Error writing to CSV file: " + ex.getMessage());
        }
    }
}
