import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.*;
import java.util.*;

public class MotorPH {
    private static final String CSV_FILE = "MotorPH_Employees.csv";

    public static void main(String[] args) {
        // Change the file path below to your Excel file's actual path
        List<Employee> employees = readEmployeesFromExcel("MotorPH_Employees.xlsx");
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\n=== MotorPH Employee Menu ===");
            System.out.println("1. View all employees");
            System.out.println("2. View specific employee");
            System.out.println("3. View pay details for employee by month");
            System.out.println("4. Add new employee and save to CSV");
            System.out.println("0. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.hasNextInt() ? scanner.nextInt() : -1;
            scanner.nextLine(); // consume newline

            switch (choice) {
                case 1 -> { // (1) Viewing all employee records
                    for (Employee e : employees) {
                        System.out.println(e.getDetails());
                    }
                }
                case 2 -> { // (2) Viewing a specific employeeâ€™s record
                    System.out.print("Enter Employee ID: ");
                    int id = scanner.nextInt();
                    scanner.nextLine();
                    employees.stream().filter(e -> e.employeeId == id)
                            .findFirst()
                            .ifPresentOrElse(
                                    e -> System.out.println(e.getDetails()),
                                    () -> System.out.println("Employee not found."));
                }
                case 3 -> { // (3) Viewing the pay details of a specific employee after selecting a month
                    System.out.print("Enter Employee ID: ");
                    int id = scanner.nextInt();
                    scanner.nextLine();
                    System.out.print("Enter month: ");
                    String month = scanner.nextLine();
                    employees.stream().filter(e -> e.employeeId == id)
                            .findFirst()
                            .ifPresentOrElse(e -> {
                                System.out.println("Pay details for " + e.getDetails());
                                System.out.println("Month: " + month);
                                System.out.println("Total Salary: " + e.calculateSalary());
                            }, () -> System.out.println("Employee not found."));
                }
                case 4 -> { // (4) Creating new employee records and saving them to the CSV file
                    Employee e = new Employee();
                    e.employeeId = employees.size() + 1;
                    System.out.print("First Name: ");
                    e.firstName = scanner.nextLine();
                    System.out.print("Last Name: ");
                    e.lastName = scanner.nextLine();
                    System.out.print("Position: ");
                    e.position = scanner.nextLine();
                    System.out.print("Basic Salary: ");
                    e.basicSalary = scanner.nextDouble();
                    System.out.print("Hourly Rate: ");
                    e.hourlyRate = scanner.nextDouble();
                    scanner.nextLine();
                    System.out.print("Department: ");
                    e.department = scanner.nextLine();
                    System.out.print("Phone: ");
                    e.contactNumber = scanner.nextLine();
                    System.out.print("Address: ");
                    e.address = scanner.nextLine();
                    System.out.print("SSS #: ");
                    e.sssNumber = scanner.nextLine();
                    System.out.print("PhilHealth #: ");
                    e.philHealthNumber = scanner.nextLine();
                    System.out.print("TIN #: ");
                    e.tinNumber = scanner.nextLine();
                    System.out.print("Pag-Ibig #: ");
                    e.pagIbigNumber = scanner.nextLine();
                    System.out.print("Meal Allowance: ");
                    e.mealAllowance = scanner.nextDouble();
                    scanner.nextLine();

                    employees.add(e);
                    saveEmployeeToCSV(e);
                    System.out.println("New employee added and saved to CSV.");
                }
                case 0 -> {
                    System.out.println("Exiting...");
                    return;
                }
                default -> System.out.println("Invalid option.");
            }
        }
    }

    // Reads employees from Excel file using Apache POI
    public static List<Employee> readEmployeesFromExcel(String filePath) {
        List<Employee> employees = new ArrayList<>();
        try (FileInputStream fis = new FileInputStream(filePath);
             Workbook workbook = new XSSFWorkbook(fis)) {
            Sheet sheet = workbook.getSheetAt(0);
            for (int i = 1; i <= sheet.getLastRowNum(); i++) { // skip header
                Row row = sheet.getRow(i);
                if (row == null) continue;
                Employee e = new Employee();
                e.employeeId = (int) row.getCell(0).getNumericCellValue();
                e.lastName = row.getCell(1).getStringCellValue();
                e.firstName = row.getCell(2).getStringCellValue();
                e.address = row.getCell(4).getStringCellValue();
                e.contactNumber = row.getCell(5).getStringCellValue();
                e.sssNumber = row.getCell(6).getStringCellValue();
                e.philHealthNumber = row.getCell(7).getStringCellValue();
                e.tinNumber = row.getCell(8).getStringCellValue();
                e.pagIbigNumber = row.getCell(9).getStringCellValue();
                e.position = row.getCell(11).getStringCellValue();
                e.basicSalary = row.getCell(13).getNumericCellValue();
                e.mealAllowance = row.getCell(14).getNumericCellValue();
                e.hourlyRate = row.getCell(16).getNumericCellValue();
                // Optionally add: e.department = row.getCell(3).getStringCellValue();
                employees.add(e);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return employees;
    }

    // Saves a single employee to CSV
    public static void saveEmployeeToCSV(Employee e) {
        try (FileWriter writer = new FileWriter(CSV_FILE, true)) {
            writer.append(String.format(
                    "%d,%s,%s,%s,%.2f,%.2f,%s,%s,%s,%s,%s,%s,%s,%.2f\n",
                    e.employeeId, e.firstName, e.lastName, e.position,
                    e.basicSalary, e.hourlyRate, e.department, e.contactNumber,
                    e.address, e.sssNumber, e.philHealthNumber, e.tinNumber,
                    e.pagIbigNumber, e.mealAllowance));
        } catch (IOException ex) {
            System.out.println("Error writing to CSV file: " + ex.getMessage());
        }
    }
}

// Employee class definition
class Employee {
    public int employeeId;
    public String firstName;
    public String lastName;
    public String position;
    public double basicSalary;
    public double hourlyRate;
    public String department;
    public String contactNumber;
    public String address;
    public String sssNumber;
    public String philHealthNumber;
    public String tinNumber;
    public String pagIbigNumber;
    public double mealAllowance;

    // Returns string with employee details
    public String getDetails() {
        return String.format("ID: %d | Name: %s %s | Position: %s | Salary: %.2f", 
            employeeId, firstName, lastName, position, basicSalary);
    }

    // Dummy salary calculation (customize as needed)
    public double calculateSalary() {
        // Replace with actual logic as needed
        return basicSalary + mealAllowance;
    }
}
